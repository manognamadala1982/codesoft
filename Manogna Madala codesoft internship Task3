                                                                   TASK3:
                                                                   TIC-TAC-TOE GAME
#include <iostream>
#include <vector>
#include <string>
#include <limits>

using namespace std;

void print_board(const vector<vector<string>>& board) {
    cout << "\n";
    for (int i = 0; i < 3; i++) {
        for (int j = 0; j < 3; j++) {
            cout << board[i][j];
            if (j < 2) cout << " | ";
        }
        cout << endl;
        if (i < 2) {
            cout << "---------\n";
        }
    }
    cout << "\n";
}

bool check_win(const vector<vector<string>>& board, const string& player) {
    for (int i = 0; i < 3; i++) {
        if ((board[i][0] == player && board[i][1] == player && board[i][2] == player) ||
            (board[0][i] == player && board[1][i] == player && board[2][i] == player)) {
            return true;
        }
    }
    if (board[0][0] == player && board[1][1] == player && board[2][2] == player) {
        return true;
    }
    if (board[0][2] == player && board[1][1] == player && board[2][0] == player) {
        return true;
    }
    return false;
}

bool check_draw(const vector<vector<string>>& board) {
    for (int i = 0; i < 3; i++) {
        for (int j = 0; j < 3; j++) {
            if (board[i][j] == " ") {
                return false;
            }
        }
    }
    return true;
}

pair<int, int> get_player_move(vector<vector<string>>& board, const string& player) {
    while (true) {
        try {
            int move;
            cout << "Player " << player << ", enter your move (1-9): ";
            cin >> move;
            if (cin.fail() || move < 1 || move > 9) {
                cin.clear();
                cin.ignore(numeric_limits<streamsize>::max(), '\n');
                throw invalid_argument("Move must be an integer between 1 and 9.");
            }
            int row = (move - 1) / 3;
            int col = (move - 1) % 3;
            if (board[row][col] != " ") {
                cout << "That spot is already taken. Try again." << endl;
            } else {
                return {row, col};
            }
        } catch (const invalid_argument& e) {
            cout << e.what() << endl;
        }
    }
}

bool play_game() {
    vector<vector<string>> board(3, vector<string>(3, " "));
    string current_player = "X";
    bool game_over = false;

    while (!game_over) {
        print_board(board);
        auto [row, col] = get_player_move(board, current_player);
        board[row][col] = current_player;

        if (check_win(board, current_player)) {
            print_board(board);
            cout << "Player " << current_player << " wins!" << endl;
            game_over = true;
        } else if (check_draw(board)) {
            print_board(board);
            cout << "It's a draw!" << endl;
            game_over = true;
        } else {
            current_player = (current_player == "X") ? "O" : "X";
        }
    }

    char play_again;
    cout << "Do you want to play again? (y/n): ";
    cin >> play_again;
    return tolower(play_again) == 'y';
}

int main() {
    cout << "Welcome to Tic-Tac-Toe!" << endl;
    
    while (true) {
        if (!play_game()) {
            cout << "Thanks for playing!" << endl;
            break;
        }
    }

    return 0;
}
output:
Welcome to Tic-Tac-Toe!

  |   |  
---------
  |   |  
---------
  |   |  

Player X, enter your move (1-9): 3

  |   | X
---------
  |   |  
---------
  |   |  

Player O, enter your move (1-9): 4

  |   | X
---------
O |   |  
---------
  |   |  

Player X, enter your move (1-9): 5

  |   | X
---------
O | X |  
---------
  |   |  

Player O, enter your move (1-9): 6

  |   | X
---------
O | X | O
---------
  |   |  

Player X, enter your move (1-9): 7

  |   | X
---------
O | X | O
---------
X |   |  

Player X wins!
Do you want to play again? (y/n): 8
Thanks for playing!


                                                         
                                              
