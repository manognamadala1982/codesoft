                                                            TASK1:
                                                            NUMBER GUESSING GAME

#include <iostream>
#include <cstdlib>
#include <ctime>
#include <limits>
using namespace std;
void guess_the_number() {
    srand(time(0));
    int secret_number = rand() % 100 + 1;
    int guess = 0;
    int attempts = 0;
    const int max_attempts = 10;

    cout << "Welcome to 'Guess the Number'!" << endl;
    cout << "I have selected a number between 1 and 100." << endl;
    cout << "You have " << max_attempts << " attempts to guess it." << endl;
    while (guess != secret_number && attempts < max_attempts) {
        cout << "Enter your guess: ";
        cin >> guess;
        attempts++;

        if (cin.fail()) {
            cin.clear(); 
            cin.ignore(std::numeric_limits<streamsize>::max(), '\n');
            cout << "Please enter a valid number." << endl;
            continue;
        }

        if (guess < secret_number) {
            cout << "Your guess is too low. Try again." << endl;
        } else if (guess > secret_number) {
            cout << "Your guess is too high. Try again." <<endl;
        } else {
            std::cout << "Congratulations! You guessed the number!" << endl;
            cout << "It took you " << attempts << " attempts." << endl;
            return; 
        }

        cout << "You have " << max_attempts - attempts << " attempts left." << endl;
    }

    if (guess != secret_number) {
        cout << "Sorry, you've run out of attempts. The correct number was " << secret_number << "." << endl;
    }
}

bool play_again() {
    char choice;
    cout << "Do you want to play again? (y/n): ";
    cin >> choice;
    if (choice == 'y' || choice == 'Y') {
        return true;
    } else if (choice == 'n' || choice == 'N') {
        return false;
    } else {
        cout << "Invalid choice, exiting the game." << endl;
        return false;
    }
}

int main() {
    do {
        guess_the_number(); 
    } while (play_again()); 
    return 0;
}
output:
Welcome to 'Guess the Number'!
I have selected a number between 1 and 100.
You have 10 attempts to guess it.
Enter your guess: 3
Your guess is too low. Try again.
You have 9 attempts left.
Enter your guess: 8
Your guess is too low. Try again.
You have 8 attempts left.
Enter your guess: 10
Your guess is too low. Try again.
You have 7 attempts left.
Enter your guess: 20
Your guess is too low. Try again.
You have 6 attempts left.
Enter your guess: 2
Your guess is too low. Try again.
You have 5 attempts left.
Enter your guess: 
=== Session Ended. Please Run the code again ===

                                                      TASK 2
                                                      SIMPLE CALCULATOR

SIMPLE CALCULATOR
#include <iostream>
#include <stdexcept>
#include <string>
#include <limits>

using namespace std;

double perform_operation(double num1, double num2, const string& op) {
    if (op == "+") {
        return num1 + num2;
    } else if (op == "-") {
        return num1 - num2;
    } else if (op == "*") {
        return num1 * num2;
    } else if (op == "/") {
        if (num2 == 0) {
            throw invalid_argument("Error! Division by zero is not allowed.");
        } else {
            return num1 / num2;
        }
    } else {
        throw invalid_argument("Invalid operator! Valid operators are: +, -, *, /.");
    }
}

void calculator() {
    double num1, num2;
    string operator_;
    
    while (true) {
        cout << "Enter the first number: ";
        while (!(cin >> num1)) {
            cin.clear();
            cin.ignore(numeric_limits<streamsize>::max(), '\n');
            cout << "Invalid input! Please enter a valid number: ";
        }

        cout << "Enter the second number: ";
        while (!(cin >> num2)) {
            cin.clear();
            cin.ignore(numeric_limits<streamsize>::max(), '\n');
            cout << "Invalid input! Please enter a valid number: ";
        }

        cout << "Enter an operator (+, -, *, /): ";
        while (true) {
            cin >> operator_;
            if (operator_ == "+" || operator_ == "-" || operator_ == "*" || operator_ == "/") {
                break;
            } else {
                cout << "Invalid operator! Valid operators are: +, -, *, /." << endl;
            }
        }

        try {
            double result = perform_operation(num1, num2, operator_);
            cout << "Result: " << result << endl;
        } catch (const invalid_argument& e) {
            cout << e.what() << endl;
        }

        char choice;
        cout << "Do you want to perform another calculation? (y/n): ";
        cin >> choice;
        if (choice == 'n' || choice == 'N') {
            cout << "Thank you for using the calculator. Goodbye!" << endl;
            break;
        }
    }
}

int main() {
    calculator();
    return 0;
}
output: 
Enter the first number: 10
Enter the second number: 20
Enter an operator (+, -, *, /): +
Result: 30
Do you want to perform another calculation? (y/n): y
Enter the first number: 40
Enter the second number: 60
Enter an operator (+, -, *, /): -
Result: -20
Do you want to perform another calculation? (y/n): y
Enter the first number: 30
Enter the second number: 40
Enter an operator (+, -, *, /): *
Result: 1200
Do you want to perform another calculation? (y/n): y
Enter the first number: 20
Enter the second number: 50
Enter an operator (+, -, *, /): /
Result: 0.4
Do you want to perform another calculation? (y/n): n
Thank you for using the calculator. Goodbye!

                                                                   TASK3:
                                                                   TIC-TAC-TOE GAME
#include <iostream>
#include <vector>
#include <string>
#include <limits>

using namespace std;

void print_board(const vector<vector<string>>& board) {
    cout << "\n";
    for (int i = 0; i < 3; i++) {
        for (int j = 0; j < 3; j++) {
            cout << board[i][j];
            if (j < 2) cout << " | ";
        }
        cout << endl;
        if (i < 2) {
            cout << "---------\n";
        }
    }
    cout << "\n";
}

bool check_win(const vector<vector<string>>& board, const string& player) {
    for (int i = 0; i < 3; i++) {
        if ((board[i][0] == player && board[i][1] == player && board[i][2] == player) ||
            (board[0][i] == player && board[1][i] == player && board[2][i] == player)) {
            return true;
        }
    }
    if (board[0][0] == player && board[1][1] == player && board[2][2] == player) {
        return true;
    }
    if (board[0][2] == player && board[1][1] == player && board[2][0] == player) {
        return true;
    }
    return false;
}

bool check_draw(const vector<vector<string>>& board) {
    for (int i = 0; i < 3; i++) {
        for (int j = 0; j < 3; j++) {
            if (board[i][j] == " ") {
                return false;
            }
        }
    }
    return true;
}

pair<int, int> get_player_move(vector<vector<string>>& board, const string& player) {
    while (true) {
        try {
            int move;
            cout << "Player " << player << ", enter your move (1-9): ";
            cin >> move;
            if (cin.fail() || move < 1 || move > 9) {
                cin.clear();
                cin.ignore(numeric_limits<streamsize>::max(), '\n');
                throw invalid_argument("Move must be an integer between 1 and 9.");
            }
            int row = (move - 1) / 3;
            int col = (move - 1) % 3;
            if (board[row][col] != " ") {
                cout << "That spot is already taken. Try again." << endl;
            } else {
                return {row, col};
            }
        } catch (const invalid_argument& e) {
            cout << e.what() << endl;
        }
    }
}

bool play_game() {
    vector<vector<string>> board(3, vector<string>(3, " "));
    string current_player = "X";
    bool game_over = false;

    while (!game_over) {
        print_board(board);
        auto [row, col] = get_player_move(board, current_player);
        board[row][col] = current_player;

        if (check_win(board, current_player)) {
            print_board(board);
            cout << "Player " << current_player << " wins!" << endl;
            game_over = true;
        } else if (check_draw(board)) {
            print_board(board);
            cout << "It's a draw!" << endl;
            game_over = true;
        } else {
            current_player = (current_player == "X") ? "O" : "X";
        }
    }

    char play_again;
    cout << "Do you want to play again? (y/n): ";
    cin >> play_again;
    return tolower(play_again) == 'y';
}

int main() {
    cout << "Welcome to Tic-Tac-Toe!" << endl;
    
    while (true) {
        if (!play_game()) {
            cout << "Thanks for playing!" << endl;
            break;
        }
    }

    return 0;
}
output:
Welcome to Tic-Tac-Toe!

  |   |  
---------
  |   |  
---------
  |   |  

Player X, enter your move (1-9): 3

  |   | X
---------
  |   |  
---------
  |   |  

Player O, enter your move (1-9): 4

  |   | X
---------
O |   |  
---------
  |   |  

Player X, enter your move (1-9): 5

  |   | X
---------
O | X |  
---------
  |   |  

Player O, enter your move (1-9): 6

  |   | X
---------
O | X | O
---------
  |   |  

Player X, enter your move (1-9): 7

  |   | X
---------
O | X | O
---------
X |   |  

Player X wins!
Do you want to play again? (y/n): 8
Thanks for playing!


                                                         
                                              

